Все эндпоинты GET если не указано иное

/auth
    /register POST
    request JSON
    {
        "login": "biba",
        "name": "Biba Biba",
        "role": "STUDENT", //Возможные значения TEACHER или STUDENT
        "password": "12345678", //минимум 6 символов
        "repeatPassword":"12345678"
    }
    /login  POST
    request JSON
    {
        "login" : "biba",
        "password" : "12345678"
    }
    response JSON
    //айди и роль нужны чтобы на фротне создавались ссылки для составления правильного эндпоинта
    {
        "userId": 6,
        "role": "STUDENT"
    }


/user/{user_id} - секция работы с пользователями

    /student - секция работы со студентами
        /profile - посмотреть свой профиль
            //response JSON
            {
                "id": 6,
                "login": "biba",
                "name": "Biba HaBiba",
                "cfHandler": "cfBiba",
                "acmpId": "228"
            }
            /edit PUT - изменить профиль
            //request JSON
            {
                "id": 6,
                "login": "biba",
                "name": "Biba HaBiba", //это поле меняется
                "cfHandler": "cfBiba",  //и это поле меняется
                "acmpId": "228"  //и это тоже
            }


        /tasks - посмотреть все задачи
            /leetcode - посмотреть все задачи с leetcode
            /acmp - посмотреть все задачи с leetcode
            /codeforces - посмотреть все задачи с leetcode
            //response JSON
            [
                {
                    "platform": "CODEFORCES",
                    "title": "Two Sum Problem",
                    "link": "codeforces.com/problemset/problem/1/A",
                    "verdict": "SUCCESS"
                },
                {
                    "platform": "LEETCODE",
                    "title": "Longest Substring Without Repeating Characters",
                    "link": "leetcode.com/problems/longest-substring-without-repeating-characters/",
                    "verdict": "SUCCESS"
                }
            ]

            /addTask PUT - если этой задачи нет в бд, добавит ее с базу и установит связь с пользователем.
            Если задача есть, то просто установит связь. Если связь есть, но изменился вердикт, изменится только вердикт. Если отправлено без изменений, ничего не произойдет
            request JSON
            !!! Для каждой платформы свой диапазон значений. Для LeetCode следай пожалуйста
            на фронте какой-нибудь конвертер, который бы переводил EASY, MEDIUM, HARD в 1,2,3 cоответственно
            {
                "platform": "CODEFORCES",
                "title": "Very Hard Problem",
                "difficulty": 1000,
                "link": "http://codeforces.ru/777/A",
                "verdict": "SUCCESS"
            }
            // Пример эндпоинта http://localhost:8080/api/v1/users/5/student/tasks/addTask
            /deleteTask DELETE - удалить задачу


        /groups - посмотреть группы в которых состоит студент
        response JSON
        [
            {
                "id": 1,
                "name": "Basic Course 2024",
                "groupGoal": 110,
                "studentGoal": 10
            },
            {
                "id": 2,
                "name": "Basic Course 2025",
                "groupGoal": 100,
                "studentGoal": 30
            }
        ]

    /teacher - секция работы с преподавателями
        /profile - посмотреть свой профиль
        response JSON
        {
            "id": 2,
            "login": "teacher2",
            "name": "Prof. Jane Roe Biba"
        }
            /edit PUT - изменить профиль
            request JSON
            {
                "id": 2,
                "login": "teacher2",
                "name": "Prof. Jane Roe Biba" //только это поле меняется
            }

        /groups - посмотреть группы которыми владеет преподаватель
        response JSON
        [
            {
                "id": 4,
                "name": "СМЕШАРИКИ",
                "groupGoal": 300,
                "ownerName": "Prof. Jane Roe Biba",
                "ownerId": 2
            },
            {
                "id": 3,
                "name": "Advanced Course 2025 Semestr 1",
                "groupGoal": 204,
                "ownerName": "Prof. Jane Roe Biba",
                "ownerId": 2
            }
        ]
            /create POST - создать группу

            http://localhost:8080/api/v1/users/1/teacher/groups/create?name=TESTGROUP&groupGoal=300&minAvgDifficulty=30
            response JSON
            {
                "id": 5,
                "name": "TestCreateGroup",
                "groupGoal": 300,
                "minAvgDifficulty": 30.0,
                "ownerName": "Prof. Jane Roe Biba",
                "ownerId": 2
            }

            /{group_id} - получить информацию о группе с данным group_id если она принаждежит пользователю
            http://localhost:8080/api/v1/users/2/teacher/groups/3
            response JSON
                        {
                            "id": 3,
                            "name": "Advanced Course 2025 Semestr 1",
                            "groupGoal": 204,
                            "ownerName": "Prof. Jane Roe Biba",
                            "ownerId": 2
                        }
                /edit PUT - редактировать группу
                request JSON
                {
                    "id": 3,
                    "name": "Advanced Course 2025 Semestr 1",// можно менять
                    "groupGoal": 204, // можно менять
                    "minAvgDifficulty": 30.0, //можно менять
                    "ownerName": "Prof. Jane Roe Biba",
                    "ownerId": 2
                }
                /addStudentInGroup
               http://localhost:8080/api/v1/users/1/teacher/groups/3/addStudent?studentLogin=teststudent&studentGoal=44
               Все параметры обязательные. Если меняется только studentGoal, будет обновлена существующая запись

/groups - секция работы с группами (получить все группы но без участников)
response
[
    {
        "id": 1,
        "name": "Basic Course 2024",
        "groupGoal": 110,
        "minAvgDifficulty": 30.0,
        "ownerName": "Dr. John Doe",
        "ownerId": 1
    },
    {
        "id": 2,
        "name": "Basic Course 2025",
        "groupGoal": 100,
        "minAvgDifficulty": 30.0,
        "ownerName": "Dr. John Doe",
        "ownerId": 1
    },
    {
        "id": 3,
        "name": "Advanced Course 2025",
        "groupGoal": 150,
        "minAvgDifficulty": 30.0,
        "ownerName": "Prof. Jane Roe",
        "ownerId": 2
    },
    {
        "id": 4,
        "name": "СМЕШАРИКИ",
        "groupGoal": 300,
        "ownerName": "Prof. Jane Roe",
        "ownerId": 2
    }
]
    /{group_id} - посмотреть информацию о группе с данным id с участниками
    response
    {
        "id": 1,
        "name": "Basic Course 2024",
        "groupGoal": 110,
        "ownerName": "Dr. John Doe",
        "ownerId": 1,
        "members": [
            {
                "id": 3,
                "login": "student1",
                "name": "Alice Johnson",
                "cfHandler": "alice_cf",
                "acmpId": "1001"
            },
            {
                "id": 4,
                "login": "student2",
                "name": "Bob Smith",
                "cfHandler": "bob_cf",
                "acmpId": "1002"
            },
            {
                "id": 5,
                "login": "student3",
                "name": "Charlie Brown",
                "cfHandler": "charlie_cf",
                "acmpId": "1003"
            }
        ]
    }

    http://localhost:8080/api/v1/groups/{group_id}/result
    {
        "groupId": 5,
        "groupGoal": 2,
        "currentGroupScore": 6,
        "failingStudents": [], //если succsess==false то тут будут студенты,которые не выполнили
                                    student goal
        "success": true
    }





